#!/usr/local/bin/emacs --script      # -*- Emacs-Lisp -*-

;;; Dependencies:

(load "/Users/joe/test-driven-development/test-driven-development.el")

;;; Documentation:

;; This file demonstrates some simple post commit tricks
;; with Emacs.  It can print out simple changed lines in a
;; buffer.  We could feed these lines into the
;; test-driven-development.el file, or use this data from
;; inside that file to get a more interesting idea of the
;; "increment" to analyse.
;;
;; We might want to get the magit package into the loop to
;; more seamlessly commit things without leaving Emacs, or
;; without getting away from the usual development
;; workflow in Emacs.
;;
;; The main problem at the moment is that
;; test-driven-development.el uses ert in an interactive
;; manner.  We could also load all of the functions there
;; and run ert in a non-interactive manner, resulting in
;; more detailed output from this script.

;; That might be the easiest thing to do.  Note that we
;; ought to be able to doctor the commit message with
;; another command.

;;; Function definitions:

(defun get-added-lines-per-commit (sha1)
  "Given a commit SHA1, return the lines that have been changed."
  (with-temp-buffer
    (insert (shell-command-to-string (concat "git show " sha1)))
    ;; for now, we will just look at the text that is added, not
    ;; text that is deleted
    (keep-lines "^\\+[^+][^+]" (point-min) (point-max))
    (goto-char (point-min))
    (while (re-search-forward "^\\+" nil t)
      (replace-match "" nil nil))
    (buffer-substring-no-properties (point-min) (point-max))))

(defun get-modified-files-per-commit (sha1)
  "Given a commit SHA1, return the names of the modified files."
  (with-temp-buffer
    (insert (shell-command-to-string (concat "git show " sha1)))
    ;; for now, we will just look at the text that is added, not
    ;; text that is deleted
    (keep-lines "^\\+\\+\\+" (point-min) (point-max))
    (goto-char (point-min))
    (while (re-search-forward "^\\+\\+\\+ b/" nil t)
      (replace-match "" nil nil))
    (buffer-substring-no-properties (point-min) (point-max))))

;;; Body:

(unless (getenv "NOGITPOSTCOMMIT")
  (let* ((orig-commit-message (shell-command-to-string "git log -1"))
         (sha1 (with-temp-buffer (insert orig-commit-message)
                                 (goto-char (point-min))
                                 (looking-at "commit \\(.*\\)")
                                 (match-string 1)))
         (added-lines (get-added-lines-per-commit sha1))
         (modified-files (get-modified-files-per-commit sha1))
         (files-arity (if (eq modified-files 1) "file" "files"))
         (working-buffer (get-buffer-create "*added-lines-buffer*")))
    
    (princ (format "sha1: %s\n"  sha1))
    (princ (format "added lines:\n%s\n" added-lines))
    (princ (format "modified files:\n%s\n" modified-files))
    
    (set-buffer (get-buffer "*added-lines-buffer*"))
    (insert added-lines)

    (setq FACE-buffer-as-increment working-buffer)
    ;; Note, this function prints its output using
    ;; `message' so maybe we can figure out a way to
    ;; access the content, but be a little more selective
    ;; about what's printed.
    (ert-run-tests-batch "^FACE")

    ;; Getting some new information into the actual commit message
    ;; jac Nov 14, 2013 - clearly we should put something "real" in rather than just generic filler
    (setenv "NOGITPOSTCOMMIT" "true")
    (let* ((in (concat "git commit --amend -m \"" (with-temp-buffer (insert orig-commit-message)
                                                                    (goto-char (point-min))
                                                                    (keep-lines "^ ")
                                                                    (goto-char (point-min))
                                                                    (while (re-search-forward "^   " nil t)
                                                                      (replace-match "" nil nil))
                                                                    (buffer-substring-no-properties (point-min) (point-max)))
                       "\n\n You modified " modified-files files-arity " and added " added-lines " lines."))
           (out (shell-command-to-string in))))
    (setenv "NOGITPOSTCOMMIT" nil)
    ))
