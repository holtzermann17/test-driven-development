#!/usr/local/bin/emacs --script      # -*- Emacs-Lisp -*

;; This is the old way
; :;exec emacs -batch -l "$0" -f main -- "$@"            
;(defun main ()
;  (princ (format "%d\n" (+ 1 2))))

;; Printing arguments back out.  Send in strings like this:
;; ./scriptname \"ABC\" def ghk
;;
;; - We don't use args for this particular script
; (princ (format "args: %s\n" command-line-args-left))

(defun get-added-lines-per-commit (sha1)
  "Given a commit SHA1, return the lines that have been changed."
  (with-temp-buffer
    (insert (shell-command-to-string (concat "git show " sha1)))
    ;; for now, we will just look at the text that is added, not
    ;; text that is deleted
    (keep-lines "^\+[^+][^+]" (point-min) (point-max))
    (goto-char (point-min))
    (while (re-search-forward "^\+" nil t)
      (replace-match "" nil nil))
    (buffer-substring-no-properties (point-min) (point-max))))

(defun get-modified-files-per-commit (sha1)
  "Given a commit SHA1, return the names of the modified files."
  (with-temp-buffer
    (insert (shell-command-to-string (concat "git show " sha1)))
    ;; for now, we will just look at the text that is added, not
    ;; text that is deleted
    (keep-lines "^\\+\\+\\+" (point-min) (point-max))
    (goto-char (point-min))
    (while (re-search-forward "^\\+\\+\\+" nil t)
      (replace-match "" nil nil))
    (buffer-substring-no-properties (point-min) (point-max))))

(let* ((orig-commit-message (shell-command-to-string "git log -1"))
       (sha1 (with-temp-buffer (insert orig-commit-message)
                                           (goto-char (point-min))
                                           (looking-at "commit \\(.*\\)")
                                           (match-string 1))))
  

  (princ (format "sha1: %s\n"  sha1))
  (princ (format "added lines:\n %s\n"  (get-added-lines-per-commit sha1)))
  (princ (format "modified files:\n %s\n"  (get-modified-files-per-commit sha1))))

; (condition-case nil (check-parens) (error (kill-emacs 1)))

;; Sending different error codes
; (kill-emacs 113)
;; Read the output of that with:  echo $?


;; prepare-commit-msg
;;        This hook is invoked by git commit right after preparing the default log message, and before the editor is started.

;;        It takes one to three parameters. The first is the name of the file that contains the commit log message. The second
;;        is the source of the commit message, and can be: message (if a -m or -F option was given); template (if a -t option
;;        was given or the configuration option commit.template is set); merge (if the commit is a merge or a .git/MERGE_MSG
;;        file exists); squash (if a .git/SQUASH_MSG file exists); or commit, followed by a commit SHA1 (if a -c, -C or
;;        --amend option was given).

;;        If the exit status is non-zero, git commit will abort.

;;        The purpose of the hook is to edit the message file in place, and it is not suppressed by the --no-verify option. A
;;        non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit
;;        hook.


;;        The sample prepare-commit-msg hook that comes with git comments out the Conflicts: part of a merge's commit message.
